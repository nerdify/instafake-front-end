type Query {
  """Get a post from a given id."""
  post(id: ID!): Post

  """Get all posts sort by enum column"""
  posts(
    orderBy: [QueryPostsOrderByOrderByClause!]

    """Limits number of fetched elements."""
    first: Int!

    """A cursor after which elements are returned."""
    after: String
  ): PostConnection

  """Get an user from an id."""
  user(id: ID!): User
  node(id: ID!): Node
}

type Post implements Likeable & Node {
  """A list of comments associated with the post."""
  comments(
    orderBy: [PostCommentsOrderByOrderByClause!]

    """Limits number of fetched elements."""
    first: Int!

    """A cursor after which elements are returned."""
    after: String
  ): CommentConnection

  """Post Root Comment"""
  rootComment: Comment

  """The post's description."""
  description: String
  id: ID!

  """"""
  images: [Image!]!

  """A list of likes associated with the post."""
  likes(
    """Limits number of fetched elements."""
    first: Int!

    """A cursor after which elements are returned."""
    after: String
  ): LikeConnection

  """User that created the post."""
  user: User!

  """
  Returns a boolean indicating whether the viewing user has saved this post.
  """
  viewerHasBookmarked: Boolean!

  """
  Returns a boolean indicating whether the viewing user has liked this post.
  """
  viewerHasLiked: Boolean!
}

interface Likeable {
  """A list of likes associated with the likeable."""
  likes: [Like!]!

  """
  Returns a boolean indicating whether the viewing user has liked this likeable.
  """
  viewerHasLiked: Boolean!
}

type Like implements Node {
  id: ID!

  """The like entity for post or comments."""
  likeable: Likeable!

  """User that created the like."""
  user: User!
}

"""Node global interface"""
interface Node {
  """Global identifier that can be used to resolve any Node implementation."""
  id: ID!
}

type User implements Node {
  """The user's email address."""
  email: String!

  """The user's first name."""
  firstName: String!
  id: ID!

  """The user's last name."""
  lastName: String!

  """The full name of the user, based on firstName and lastName."""
  name: String!

  """A list of posts associated with the user."""
  posts(
    """Limits number of fetched elements."""
    first: Int!

    """A cursor after which elements are returned."""
    after: String
  ): PostConnection

  """The user's username."""
  username: String!
}

"""A paginated list of Post edges."""
type PostConnection {
  """Pagination information about the list of edges."""
  pageInfo: PageInfo!

  """A list of Post edges."""
  edges: [PostEdge]
}

"""Pagination information about the corresponding list of items."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Total number of node in connection."""
  total: Int

  """Count of nodes in current request."""
  count: Int

  """Current page of request."""
  currentPage: Int

  """Last page in connection."""
  lastPage: Int
}

"""An edge that contains a node of type Post and a cursor."""
type PostEdge {
  """The Post node."""
  node: Post

  """A unique cursor that can be used for pagination."""
  cursor: String!
}

"""Order by clause for the `orderBy` argument on the query `comments`."""
input PostCommentsOrderByOrderByClause {
  """The column that is used for ordering."""
  column: PostCommentsFields!

  """The direction that is used for ordering."""
  order: SortOrder!
}

enum PostCommentsFields {
  CREATED_AT
}

"""The available directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

"""A paginated list of Comment edges."""
type CommentConnection {
  """Pagination information about the list of edges."""
  pageInfo: PageInfo!

  """A list of Comment edges."""
  edges: [CommentEdge]
}

"""An edge that contains a node of type Comment and a cursor."""
type CommentEdge {
  """The Comment node."""
  node: Comment

  """A unique cursor that can be used for pagination."""
  cursor: String!
}

type Comment implements Likeable & Node {
  createdAt: DateTime!
  id: ID!

  """A list of likes associated with the comment."""
  likes(
    """Limits number of fetched elements."""
    first: Int!

    """A cursor after which elements are returned."""
    after: String
  ): LikeConnection

  """Post where the comment was created."""
  post: Post!

  """User that created the comment."""
  user: User!

  """The post's text."""
  text: String

  """
  Returns a boolean indicating whether the viewing user has liked this comment.
  """
  viewerHasLiked: Boolean!
}

"""
An ISO-8601 encoded UTC date time string. Example value: `2019-07-03T20:47:55Z`.
"""
scalar DateTime

"""A paginated list of Like edges."""
type LikeConnection {
  """Pagination information about the list of edges."""
  pageInfo: PageInfo!

  """A list of Like edges."""
  edges: [LikeEdge]
}

"""An edge that contains a node of type Like and a cursor."""
type LikeEdge {
  """The Like node."""
  node: Like

  """A unique cursor that can be used for pagination."""
  cursor: String!
}

type Image {
  """The url of the image from a post"""
  url: URI!
}

"""An RFC 3986 and RFC 3987 compliant URI string."""
scalar URI

"""Order by clause for the `orderBy` argument on the query `posts`."""
input QueryPostsOrderByOrderByClause {
  """The column that is used for ordering."""
  column: PostsOrderColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

enum PostsOrderColumn {
  CREATED_AT
}

type Mutation {
  createComment(input: CreateCommentInput!): CreateCommentPayload
  addLike(input: AddLikeInput!): AddLikePayload
  removeLike(input: RemoveLikeInput!): RemoveLikePayload
  createBookmark(input: CreateBookmarkInput!): CreateBookmarkPayload
  removeBookmark(input: RemoveBookmarkInput!): RemoveBookmarkPayload
  createPost(input: CreatePostInput!): CreatePostPayload
}

input CreateCommentInput {
  postId: ID!
  text: String!
  userId: ID!
}

type CreateCommentPayload {
  commentEdge: CommentEdge!
  parent: Comment
}

input AddLikeInput {
  subjectId: ID!
}

type AddLikePayload {
  like: Like!
  subject: Likeable!
}

input RemoveLikeInput {
  subjectId: ID!
}

type RemoveLikePayload {
  subject: Likeable!
}

input CreateBookmarkInput {
  """The post id for save has a bookmark."""
  postId: ID!
}

type CreateBookmarkPayload {
  post: Post
}

input RemoveBookmarkInput {
  postId: ID!
}

type RemoveBookmarkPayload {
  post: Post
}

input CreatePostInput {
  """All photos for create a new post."""
  photos: [Upload!]!

  """Text comment for the new post."""
  text: String!
}

"""
Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec.
"""
scalar Upload

type CreatePostPayload {
  post: Post!
}

type Subscription {
  postUpdated: Post
}

"""Entities that can be deleted."""
interface Deletable {
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
}

"""Represents a type that can be retrieved by a URL."""
interface UniformResourceLocatable {
  """The HTML path to this resource."""
  resourcePath: URI!

  """The URL to this resource."""
  url: URI!
}

"""Entities that can be updated."""
interface Updatable {
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
}

"""A [RFC 5321](https://tools.ietf.org/html/rfc5321) compliant email."""
scalar Email

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""Pagination information about the corresponding list of items."""
type PaginatorInfo {
  """Total count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """If collection has more pages."""
  hasMorePages: Boolean!

  """Index of last item in the current page."""
  lastItem: Int

  """Last page number of the collection."""
  lastPage: Int!

  """Number of items per page in the collection."""
  perPage: Int!

  """Total items available in the collection."""
  total: Int!
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}
